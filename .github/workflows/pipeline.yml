name: Crewmeister-DevOps-Challenge

on:
  release:
    types: [created]
  push:
    branches: [ main ]

jobs:
  Build:
    name: Maven-Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: dev
          MYSQL_DATABASE: challenge
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and verify with Maven
        run: mvn clean verify -e -X
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/challenge?createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: dev

      - name: Package workflow data as artifacts
        run: mkdir staging && cp target/crewmeisterchallenge-0.0.1-SNAPSHOT.jar staging/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging

  Scan:
    name: Trivy-Scan
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: './trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './trivy-results.sarif'

  Dependency-Check:
    name: OWASP Dependency-Check
    needs: Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "crewmeister-service"
          path: "."
          format: "HTML"
          out: "dependency-check-report.html"

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: Dependency Check Report
          path: dependency-check-report.html

  Build-Image:
    name: Build Docker Image
    needs: Dependency-Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: app

      - name: Create Dockerfile
        run: |
          cat <<EOF > app/Dockerfile
          FROM eclipse-temurin:17-jre
          WORKDIR /app
          COPY crewmeisterchallenge-0.0.1-SNAPSHOT.jar app.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF

      - name: Build Docker image
        run: docker build -t crewmeister-service:latest app

      # - name: Run Docker container
      #   run: docker run -d -p 8080:8080 crewmeister-service:latest